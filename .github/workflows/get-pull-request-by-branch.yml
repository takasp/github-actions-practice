name: get-pull-request-by-branch
on:
  workflow_dispatch:
    inputs:
      pr_numbers:
        description: 'Comma-separated list of Pull Request numbers'
        required: false
  pull_request:
    types: [ closed ]

jobs:
  summary:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    environment: GAS_URL
    steps:
      - name: Get event name merged
        id: merged
        if: github.event.pull_request.merged == true
        run: echo event='merged' >> $GITHUB_OUTPUT
      - name: Get event name workflow_dispatch
        id: workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo event='workflow_dispatch' >> $GITHUB_OUTPUT
      - name: echo vars
        run: |
          echo ${{ steps.merged.outputs.event }}
          echo ${{ steps.workflow_dispatch.outputs.event }}
      - name: Set inputs
        run: |
          echo "PR_NUMBERS=${{ github.event.inputs.pr_numbers || '' }}" >> $GITHUB_ENV
      - name: Get pull requests
        uses: actions/github-script@v7
        env:
          EVENT_NAME: ${{ steps.merged.outputs.event || steps.workflow_dispatch.outputs.event }}
          LEAD_TIME_URL: ${{ secrets.LEAD_TIME_URL }}
          NODE_OPTIONS: "--max_old_space_size=4096"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const toJSTString = (dateString) => {
              if (!dateString) return null;
              const date = new Date(dateString);
              date.setHours(date.getHours() + 9); // Convert to JST
              return date.toISOString().replace(/T/, ' ').replace(/\..+/, '').replace(/-/g, '/').slice(0, -3);
            };
            
            const getMinDate = (dates) => {
              const validDates = dates.filter(date => date);
              return validDates.length > 0 ? new Date(Math.min(...validDates.map(date => new Date(date)))) : null;
            };

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let prNumbers = [];
            let isPullRequestEvent = false;

            if (context.event_name === 'workflow_dispatch' && context.payload.inputs.pr_numbers) {
              prNumbers = context.payload.inputs.pr_numbers.split(',').map(num => parseInt(num.trim(), 10));
            } else if (context.event_name === 'pull_request') {
              prNumbers = [context.payload.pull_request.number];
              isPullRequestEvent = true;
            }
            console.log("github.event_name:", github.event_name);
            console.log("context.event_name:", context.event_name);
            console.log("context:", JSON.stringify(context));
            console.log("inputs.pr_numbers:", inputs.pr_numbers);
            console.log("prNumbers:", prNumbers);
            console.log("context.event_name:", context.event_name);
            console.log("isPullRequestEvent:", isPullRequestEvent);

            const query = `
              query ($owner: String!, $repo: String!, $cursor: String) {
                repository(owner: $owner, name: $repo) {
                  pullRequests(states: MERGED, first: 100, after: $cursor) {
                    edges {
                      node {
                        number
                        createdAt
                        mergedAt
                        baseRefName
                        headRefName
                        author {
                          login
                        }
                        repository {
                          nameWithOwner
                        }
                        commits(first: 1) {
                          nodes {
                            commit {
                              authoredDate
                              committedDate
                            }
                          }
                        }
                      }
                    }
                    pageInfo {
                      endCursor
                      hasNextPage
                    }
                  }
                }
              }
            `;
            
            let mergedPRs = [];
            let cursor = null;
            let hasNextPage = true;

            while (hasNextPage) {
              const result = await github.graphql(query, {
                owner,
                repo,
                cursor
              });

              const prs = result.repository.pullRequests.edges.map(edge => edge.node);

              // PRsの処理
              for (const pr of prs) {
                // authorがないのはCloseされたPRの可能性があるのでスキップ
                if (pr.author === null) continue;
                const firstCommit = pr.commits.nodes.length > 0 ? pr.commits.nodes[0].commit : null;
                // commitがないPRが存在する場合がるのでスキップ
                if (!firstCommit) continue;

                const createdAt = pr.createdAt;
                const firstCommitAt = firstCommit.committedDate;
                const firstCommitAuthoredAt = firstCommit.authoredDate;
            
                // 日付のいずれかがなければスキップ
                if (!createdAt || !firstCommitAt || !firstCommitAuthoredAt) continue;
            
                // PRの作成時刻:createdAt, 最初のコミットを取り込んだ時刻:firstCommitAt, 最初のコミット作成時刻:firstCommitAuthoredAtのいずれかミニマムを取得
                // AuthorDateが更新されないことを前提に最初の活動の時刻を取得するのが目的
                const firstCreated = getMinDate([createdAt, firstCommitAt, firstCommitAuthoredAt]);
            
                mergedPRs.push({
                  number: pr.number,
                  created_at: pr.createdAt,
                  merged_at: pr.mergedAt,
                  first_commit_at: firstCommitAt,
                  first_commit_author_date: firstCommitAuthoredAt,
                  repository: pr.repository.nameWithOwner,
                  author: pr.author ? pr.author.login : 'unknown',
                  base: pr.baseRefName,
                  head: pr.headRefName,
                  jst_merged_at: toJSTString(pr.mergedAt),
                  jst_first_created: toJSTString(firstCreated.toISOString())
                });
              }

              cursor = result.repository.pullRequests.pageInfo.endCursor;
              hasNextPage = !isPullRequestEvent && result.repository.pullRequests.pageInfo.hasNextPage;
            }
            
            const url = process.env.LEAD_TIME_URL;
            for (const pr of mergedPRs) {
              try {
                const formData = new URLSearchParams();
                formData.append('entry.1737429438', pr.number);
                formData.append('entry.696990060', pr.created_at);
                formData.append('entry.883568870', pr.merged_at);
                formData.append('entry.1542610687', pr.first_commit_at);
                formData.append('entry.400445109', pr.first_commit_author_date);
                formData.append('entry.1770012755', pr.repository);
                formData.append('entry.1888619409', pr.author);
                formData.append('entry.864339788', pr.base);
                formData.append('entry.1775356616', pr.head);
                formData.append('entry.1457774321', pr.jst_merged_at);
                formData.append('entry.1401680068', pr.jst_first_created);
                const response = await fetch(url, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                  },
                  body: formData,
                });
            
                if (!response.ok) {
                  console.error(`Failed to post data: ${response.status} - ${await response.text()}`);
                }
              } catch (error) {
                console.log('pr: ', pr);
                console.error('Error:', error);
              }
            }
