name: Get Workflow Number and Completion Time

on:
#  workflow_run:
#    workflows: ["Hadolint"]
#    types:
#      - completed
  workflow_dispatch:
    inputs:
      run_numbers:
        description: 'Comma-separated list of run numbers'
        required: false
  push:
    branches: [ "main" ]

jobs:
  get_workflow_info:
    runs-on: ubuntu-latest
    environment: GAS_URL

    steps:
      - name: Get event name workflow_run_success
        id: workflow_run_success
        if: github.event.workflow_run.conclusion == 'success'
        run: echo event='workflow_run_success' >> $GITHUB_OUTPUT
      - name: Get event name workflow_dispatch
        id: workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo event='workflow_dispatch' >> $GITHUB_OUTPUT
      - name: echo vars
        run: |
          echo ${{ steps.workflow_run_success.outputs.event }}
          echo ${{ steps.workflow_dispatch.outputs.event }}
      - name: Set inputs
        run: |
          echo "RUN_NUMBERS=${{ github.event.inputs.run_numbers || '' }}" >> $GITHUB_ENV
      - name: Get Workflow Number and Completion Time
        uses: actions/github-script@v6
        env:
          EVENT_NAME: ${{ steps.workflow_run_success.outputs.event || steps.workflow_dispatch.outputs.event }}
          DEPLOYMENT_FREQUENCY_URL: ${{ secrets.DEPLOYMENT_FREQUENCY_URL }}
        with:
          script: |
            const eventName = process.env.EVENT_NAME;
            const inputRunNumbers = process.env.RUN_NUMBERS;
            const allWorkflowRuns = [];
            const workflowId = '73424475';

            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            console.log(JSON.stringify(workflows));
            
            const workflow = await github.rest.actions.getWorkflow({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '73424475',
            });
            console.log(JSON.stringify(workflow));
            
            const workflowRuns = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowId,
              status: 'completed',
            });
            
            if (eventName === 'workflow_dispatch' && inputRunNumbers) {
              const runNumbers = inputRunNumbers.split(',').map(Number);
              const workflow_runs = await Promise.all(runNumbers.map(async runNumber => {
                const response = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowId,
                });
                return response.data;
              }));
            
              allWorkflowRuns.push(...workflow_runs);
            } else if (eventName === 'workflow_dispatch') {
              const perPage = 100;
              let page = 1;
              while (true) {
                const { data: { workflow_runs } } = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowId,
                  status: 'completed',
                  per_page: perPage,
                  page: page
                });
              
                if (workflow_runs.length === 0) {
                  break;
                }
              
                allWorkflowRuns.push(...workflow_runs);
                page++;
              }
            } else if (eventName === 'workflow_run_success') {
              const { data } = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowId,
              });
              allWorkflowRuns.push(...[data]);
            }

            const runs = allWorkflowRuns.map(workflowRun => ({
              number: workflowRun.run_number,
              released_at: workflowRun.updated_at,
              repository: workflowRun.repository.name,
              author: workflowRun.triggering_actor.login,
            }))
            console.log(JSON.stringify(runs));

            if (runs.length) {
              const url = process.env.DEPLOYMENT_FREQUENCY_URL;
              fetch(url, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(runs)
              }).then((response) => {
                console.log(JSON.stringify(response));
              }).catch((error) => {
                console.error(error);
              });
            }


#            const completedAt = new Date(runs.jobs[0].completed_at);
#            console.log(`Workflow completed at: ${completedAt.toISOString()}`);


#            const workflow = await github.rest.actions.getWorkflow({ workflow_id: github.run_id });
#            console.log(`Workflow Number: ${workflow.number}`);
#
#            const runs = await github.actions.listJobsForWorkflowRun({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              run_id: github.run_id
#            });
